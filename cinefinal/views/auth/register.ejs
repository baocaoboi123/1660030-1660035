<section style="background-color: #000;" id="about1"   class="about1 py-3"> 
      
    <div style="display:flex;" class="row align-items-center container my-5 mx-auto" >
        <div style="margin: 0 auto;"  class="text col-lg-12 col-md-12 col-12 w-50  ">               
            <div  class="card-body text-light" style="overflow-y: scroll;   height: 100%;  width: 100%;">
                <h2 class="text-light form-title text-align-center text-center">~ ĐĂNG KÝ ~</h2>
                <% if (message === ""){%>

                <%}else{%>
                    <div class="alert alert-warning alert-dismissible fade show" role="alert">
                        <div class="text-center" style=" margin: 0 auto;">

                        
                            <strong style="font-size: 15px; color: red;"><%- message %>!</strong> You should check in on some of those fields below.
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                <%}%>
                
                  
                <form style="width:75%;" action="" method="POST" class="container form" id="form-1">
                        
                
                        <div class="form-group">
                          <label for="hoten" class="form-label">Tên đầy đủ</label>
                          <input id="hoten" name="hoten" type="text" placeholder="VD: S1mple" class="form-control">
                          <span class="form-message"></span>
                        </div>
                
                        <div class="form-group">
                          <label for="email" class="form-label">Email</label>
                          <input id="email" name="email" type="text" placeholder="VD: email@domain.com" class="form-control">
                          <span class="form-message"></span>
                        </div>
                        <div class="form-group">
                          <label for="sodienthoai" class="form-label">Số điện thoại</label>
                          <input id="sodienthoai" name="sodienthoai" type="text" placeholder="+84" class="form-control">
                          <span class="form-message"></span>
                        </div>
                        <div class="form-group">
                          <label for="password" class="form-label">Mật khẩu</label>
                          <input id="password" name="password" type="password" placeholder="Nhập mật khẩu" class="form-control">
                          <span class="form-message"></span>
                        </div>
                
                        <div class="form-group">
                          <label for="confirmpassword" class="form-label">Nhập lại mật khẩu</label>
                          <input id="confirmpassword" name="confirmpassword" placeholder="Nhập lại mật khẩu" type="password" class="form-control">
                          <span class="form-message"></span>
                        </div>
                
                        <button class="form-submit">Đăng ký</button>
                </form>

            </div>
        </div>
        
    </div>
</section>

<%- include('../partials/footer.ejs') %>

<script>
// Đối tượng `Validator`
function Validator(options) {
    function getParent(element, selector) {
        while (element.parentElement) {
            if (element.parentElement.matches(selector)) {
                return element.parentElement;
            }
            element = element.parentElement;
        }
    }

    var selectorRules = {};

    // Hàm thực hiện validate
    function validate(inputElement, rule) {
        var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);
        var errorMessage;

        // Lấy ra các rules của selector
        var rules = selectorRules[rule.selector];
        
        // Lặp qua từng rule & kiểm tra
        // Nếu có lỗi thì dừng việc kiểm
        for (var i = 0; i < rules.length; ++i) {
            switch (inputElement.type) {
                case 'radio':
                case 'checkbox':
                    errorMessage = rules[i](
                        formElement.querySelector(rule.selector + ':checked')
                    );
                    break;
                default:
                    errorMessage = rules[i](inputElement.value);
            }
            if (errorMessage) break;
        }
        
        if (errorMessage) {
            errorElement.innerText = errorMessage;
            getParent(inputElement, options.formGroupSelector).classList.add('invalid');
        } else {
            errorElement.innerText = '';
            getParent(inputElement, options.formGroupSelector).classList.remove('invalid');
        }

        return !errorMessage;
    }

    // Lấy element của form cần validate
    var formElement = document.querySelector(options.form);
    if (formElement) {
        // Khi submit form
        formElement.onsubmit = function (e) {
            e.preventDefault();

            var isFormValid = true;

            // Lặp qua từng rules và validate
            options.rules.forEach(function (rule) {
                var inputElement = formElement.querySelector(rule.selector);
                var isValid = validate(inputElement, rule);
                if (!isValid) {
                    isFormValid = false;
                }
            });

            if (isFormValid) {
                // Trường hợp submit với javascript
                if (typeof options.onSubmit === 'function') {
                    var enableInputs = formElement.querySelectorAll('[name]');
                    var formValues = Array.from(enableInputs).reduce(function (values, input) {
                        
                        switch(input.type) {
                            case 'radio':
                                values[input.name] = formElement.querySelector('input[name="' + input.name + '"]:checked').value;
                                break;
                            case 'checkbox':
                                if (!input.matches(':checked')) {
                                    values[input.name] = '';
                                    return values;
                                }
                                if (!Array.isArray(values[input.name])) {
                                    values[input.name] = [];
                                }
                                values[input.name].push(input.value);
                                break;
                            case 'file':
                                values[input.name] = input.files;
                                break;
                            default:
                                values[input.name] = input.value;
                        }

                        return values;
                    }, {});
                    options.onSubmit(formValues);
                }
                // Trường hợp submit với hành vi mặc định
                else {
                    formElement.submit();
                }
            }
        }

        // Lặp qua mỗi rule và xử lý (lắng nghe sự kiện blur, input, ...)
        options.rules.forEach(function (rule) {

            // Lưu lại các rules cho mỗi input
            if (Array.isArray(selectorRules[rule.selector])) {
                selectorRules[rule.selector].push(rule.test);
            } else {
                selectorRules[rule.selector] = [rule.test];
            }

            var inputElements = formElement.querySelectorAll(rule.selector);

            Array.from(inputElements).forEach(function (inputElement) {
               // Xử lý trường hợp blur khỏi input
                inputElement.onblur = function () {
                    validate(inputElement, rule);
                }

                // Xử lý mỗi khi người dùng nhập vào input
                inputElement.oninput = function () {
                    var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);
                    errorElement.innerText = '';
                    getParent(inputElement, options.formGroupSelector).classList.remove('invalid');
                } 
            });
        });
    }

}



// Định nghĩa rules
// Nguyên tắc của các rules:
// 1. Khi có lỗi => Trả ra message lỗi
// 2. Khi hợp lệ => Không trả ra cái gì cả (undefined)
Validator.isRequired = function (selector, message) {
    return {
        selector: selector,
        test: function (value) {
            return value ? undefined :  message || 'Vui lòng nhập trường này'
        }
    };
}

Validator.isEmail = function (selector, message) {
    return {
        selector: selector,
        test: function (value) {
            var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
            return regex.test(value) ? undefined :  message || 'Trường này phải là email';
        }
    };
}
Validator.minLength = function (selector, min, message) {
    return {
        selector: selector,
        test: function (value) {
            return value.length >= min ? undefined :  message || `Vui lòng nhập tối thiểu ${min} kí tự`;
        }
    };
}
Validator.minLength = function (selector, min, message) {
    return {
        selector: selector,
        test: function (value) {
            return value.length >= min ? undefined :  message || `Vui lòng nhập tối thiểu ${min} kí tự`;
        }
    };
}

Validator.isConfirmed = function (selector, getConfirmValue, message) {
    return {
        selector: selector,
        test: function (value) {
            return value === getConfirmValue() ? undefined : message || 'Giá trị nhập vào không chính xác';
        }
    }
}
Validator.isPho = function (selector, message) {
            return {
                selector: selector,
                test: function (value) {
                    var regex =/((09|03|07|08|05)+([0-9]{8})\b)/g;

                    return regex.test(value) ? undefined :  message || 'Số điện thoại không đúng định dạng! ';
                }
            };
        }



// =================================================================
        document.addEventListener('DOMContentLoaded', function () {
          // Mong muốn của chúng ta
          Validator({
            form: '#form-1',
            formGroupSelector: '.form-group',
            errorSelector: '.form-message',
            rules: [
              Validator.isRequired('#hoten', 'Vui lòng nhập tên đầy đủ của bạn'),
              Validator.isEmail('#email'),
              Validator.isPho('#sodienthoai'),
              Validator.minLength('#password', 3),
              Validator.isRequired('#confirmpassword'),
              Validator.isConfirmed('#confirmpassword', function () {
                return document.querySelector('#form-1 #password').value;
              }, 'Mật khẩu nhập lại không chính xác')
            ],
            // onSubmit: function (data) {
            //   // Call API
            //   console.log(data);
            // }
          });
  
  
          Validator({
            form: '#form-2',
            formGroupSelector: '.form-group',
            errorSelector: '.form-message',
            rules: [
              Validator.isEmail('#email'),
              Validator.minLength('#password', 6),
            ],
            // onSubmit: function (data) {
            //   // Call API
            //   console.log(data);
            // }
          });
        });
  
      </script>

        
    
