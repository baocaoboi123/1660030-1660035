<section id="about" class="about py-5">
    <div class="row align-items-center container my-5 mx-auto">
        <div class="text col-lg-6 col-md-6 col-12 w-50 pt-5 pb-5">
            <h6>PREMIUM </h6>
            <h2>Neque porro quisquam est qui </h2>
            <p>
                Lorem Ipsum is simply dummy text of the printing and typesetting industry. 
                Lorem Ipsum has been the industry's standard dummy text ever since the 1500s
            </p>
            <a href="">Learn More</a>
            
        </div>
        <div class="img col-lg-6 col-md-6 col-12 w-50 pt-auto pb-auto">
            <div style="overflow-y: scroll; height: 529px;" class="card"  >
                <img style="height: 200px;" class="card-img-top" src="../images/page/2.jpg" alt="Card image cap">
                <div class="card-body" style=" background-color: lightgrey; ">
                    <h2 class="form-title text-align-center text-center">SIGN UP</h2>
                    <% if (message === ""){%>

                    <%}else{%>
                        <h5 class="alert alert-danger mt-4"><%- message %></h5>

                    <%}%>
                    <!-- <form method="POST">
                        <div class="input-group mb-3">                            
                            <input type="text" class="form-control" name="email" id="email" aria-describedby="emailHelp" placeholder=" Email">                        
                        </div>
                        <div class="form-group">
                            <div class="input-group mb-3">                            
                                <label for="name"><i class="zmdi zmdi-account material-icons-name"></i></label>
                                <input type="password" class="form-control" name="password" id="password" placeholder=" Password">
                            </div>
                        </div>
                        <div class="form-group form-button">
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <a href="/auth/register" class="signup-image-link">Create an account</a>
                        </div>
                    </form> -->
                    <form  method="POST" class="form" id="form-2">
                           
                            <!-- <div class="spacer"></div> -->
                    
                            <div class="form-group">
                              <label for="email" class="form-label">Email</label>
                              <input id="email" name="email" type="text" placeholder="VD: email@domain.com" class="form-control">
                              <span class="form-message"></span>
                            </div>
                    
                            <div class="form-group">
                              <label for="password" class="form-label">Mật khẩu</label>
                              <input id="password" name="password" type="password" placeholder="Nhập mật khẩu" class="form-control">
                              <span class="form-message"></span>
                            </div>
                    
                            <button class="form-submit">Đăng nhập</button>
                    </form>


                  
                </div>
            </div>             
        </div>
    </div>
</section>
<script>
        // Đối tượng `Validator`
        function Validator(options) {
            function getParent(element, selector) {
                while (element.parentElement) {
                    if (element.parentElement.matches(selector)) {
                        return element.parentElement;
                    }
                    element = element.parentElement;
                }
            }
        
            var selectorRules = {};
        
            // Hàm thực hiện validate
            function validate(inputElement, rule) {
                var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);
                var errorMessage;
        
                // Lấy ra các rules của selector
                var rules = selectorRules[rule.selector];
                
                // Lặp qua từng rule & kiểm tra
                // Nếu có lỗi thì dừng việc kiểm
                for (var i = 0; i < rules.length; ++i) {
                    switch (inputElement.type) {
                        case 'radio':
                        case 'checkbox':
                            errorMessage = rules[i](
                                formElement.querySelector(rule.selector + ':checked')
                            );
                            break;
                        default:
                            errorMessage = rules[i](inputElement.value);
                    }
                    if (errorMessage) break;
                }
                
                if (errorMessage) {
                    errorElement.innerText = errorMessage;
                    getParent(inputElement, options.formGroupSelector).classList.add('invalid');
                } else {
                    errorElement.innerText = '';
                    getParent(inputElement, options.formGroupSelector).classList.remove('invalid');
                }
        
                return !errorMessage;
            }
        
            // Lấy element của form cần validate
            var formElement = document.querySelector(options.form);
            if (formElement) {
                // Khi submit form
                formElement.onsubmit = function (e) {
                    e.preventDefault();
        
                    var isFormValid = true;
        
                    // Lặp qua từng rules và validate
                    options.rules.forEach(function (rule) {
                        var inputElement = formElement.querySelector(rule.selector);
                        var isValid = validate(inputElement, rule);
                        if (!isValid) {
                            isFormValid = false;
                        }
                    });
        
                    if (isFormValid) {
                        // Trường hợp submit với javascript
                        if (typeof options.onSubmit === 'function') {
                            var enableInputs = formElement.querySelectorAll('[name]');
                            var formValues = Array.from(enableInputs).reduce(function (values, input) {
                                
                                switch(input.type) {
                                    case 'radio':
                                        values[input.name] = formElement.querySelector('input[name="' + input.name + '"]:checked').value;
                                        break;
                                    case 'checkbox':
                                        if (!input.matches(':checked')) {
                                            values[input.name] = '';
                                            return values;
                                        }
                                        if (!Array.isArray(values[input.name])) {
                                            values[input.name] = [];
                                        }
                                        values[input.name].push(input.value);
                                        break;
                                    case 'file':
                                        values[input.name] = input.files;
                                        break;
                                    default:
                                        values[input.name] = input.value;
                                }
        
                                return values;
                            }, {});
                            options.onSubmit(formValues);
                        }
                        // Trường hợp submit với hành vi mặc định
                        else {
                            formElement.submit();
                        }
                    }
                }
        
                // Lặp qua mỗi rule và xử lý (lắng nghe sự kiện blur, input, ...)
                options.rules.forEach(function (rule) {
        
                    // Lưu lại các rules cho mỗi input
                    if (Array.isArray(selectorRules[rule.selector])) {
                        selectorRules[rule.selector].push(rule.test);
                    } else {
                        selectorRules[rule.selector] = [rule.test];
                    }
        
                    var inputElements = formElement.querySelectorAll(rule.selector);
        
                    Array.from(inputElements).forEach(function (inputElement) {
                       // Xử lý trường hợp blur khỏi input
                        inputElement.onblur = function () {
                            validate(inputElement, rule);
                        }
        
                        // Xử lý mỗi khi người dùng nhập vào input
                        inputElement.oninput = function () {
                            var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);
                            errorElement.innerText = '';
                            getParent(inputElement, options.formGroupSelector).classList.remove('invalid');
                        } 
                    });
                });
            }
        
        }
        
        
        
        // Định nghĩa rules
        // Nguyên tắc của các rules:
        // 1. Khi có lỗi => Trả ra message lỗi
        // 2. Khi hợp lệ => Không trả ra cái gì cả (undefined)
        Validator.isRequired = function (selector, message) {
            return {
                selector: selector,
                test: function (value) {
                    return value ? undefined :  message || 'Vui lòng nhập trường này'
                }
            };
        }
        
        Validator.isEmail = function (selector, message) {
            return {
                selector: selector,
                test: function (value) {
                    var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                    return regex.test(value) ? undefined :  message || 'Trường này phải là email';
                }
            };
        }
        Validator.minLength = function (selector, min, message) {
            return {
                selector: selector,
                test: function (value) {
                    return value.length >= min ? undefined :  message || `Vui lòng nhập tối thiểu ${min} kí tự`;
                }
            };
        }
        Validator.minLength = function (selector, min, message) {
            return {
                selector: selector,
                test: function (value) {
                    return value.length >= min ? undefined :  message || `Vui lòng nhập tối thiểu ${min} kí tự`;
                }
            };
        }
        
        Validator.isConfirmed = function (selector, getConfirmValue, message) {
            return {
                selector: selector,
                test: function (value) {
                    return value === getConfirmValue() ? undefined : message || 'Giá trị nhập vào không chính xác';
                }
            }
        }
        
        
        
        
        // =================================================================
                document.addEventListener('DOMContentLoaded', function () {
                  // Mong muốn của chúng ta
                  Validator({
                    form: '#form-1',
                    formGroupSelector: '.form-group',
                    errorSelector: '.form-message',
                    rules: [
                      Validator.isRequired('#hoten', 'Vui lòng nhập tên đầy đủ của bạn'),
                      Validator.isEmail('#email'),
                      Validator.minLength('#sodienthoai',9),
                      Validator.minLength('#password', 3),
                      Validator.isRequired('#confirmpassword'),
                      Validator.isConfirmed('#confirmpassword', function () {
                        return document.querySelector('#form-1 #password').value;
                      }, 'Mật khẩu nhập lại không chính xác')
                    ],
                    // onSubmit: function (data) {
                    //   // Call API
                    //   console.log(data);
                    // }
                  });
          
          
                  Validator({
                    form: '#form-2',
                    formGroupSelector: '.form-group',
                    errorSelector: '.form-message',
                    rules: [
                      Validator.isEmail('#email'),
                      Validator.minLength('#password', 3),
                    ],
                    // onSubmit: function (data) {
                    //   // Call API
                    //   console.log(data);
                    // }
                  });
                });
          
              </script>